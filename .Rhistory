return(df)
}) %>%
rbindlist()
View(reading_list)
View(reading_list)
reading_list <- lapply(1:length(query_origin), function(x) {
df <- articles_origin_list[[query_origin[x]]] %>%
dplyr::select(as.vector(columns_names[[query_origin[x]]])) %>%
mutate(Database = ifelse(length(columns_names[[query_origin[x]]]) == 7,
Database, query_origin[x]))
colnames(df) <- c("Title" , "Author", "Source", "Year", "DOI", "Abstract", "Database")
return(df)
}) %>%
rbindlist()
View(reading_list)
reading_list <- lapply(1:length(query_origin), function(x) {
df <- articles_origin_list[[query_origin[x]]] %>%
dplyr::select(as.vector(columns_names[[query_origin[x]]]))
if(ncol(df) == 6) {
df$Database <- query_origin[x]
}
colnames(df) <- c("Title" , "Author", "Source", "Year", "DOI", "Abstract", "Database")
return(df)
}) %>%
rbindlist()
View(reading_list)
View(reading_list)
reading_list <- lapply(1:length(query_origin), function(x) {
df <- articles_origin_list[[query_origin[x]]] %>%
dplyr::select(as.vector(columns_names[[query_origin[x]]]))
print(ncol(df))
if(ncol(df) == 6) {
df$Database <- query_origin[x]
}
colnames(df) <- c("Title" , "Author", "Source", "Year", "DOI", "Abstract", "Database")
return(df)
}) %>%
rbindlist()
View(columns_names)
knitr::opts_chunk$set(echo = FALSE)
require(readxl)
require(tidyverse)
require(data.table)
query_origin <- c("WoS", "Scopus", "CompendexInspec", "GoogleScholar")
articles_origin_list <-lapply(query_origin, function(x) {
read_xlsx(path = paste0("ReadingList/", x, ".xlsx"))
})
names(articles_origin_list) <- query_origin
columns_names <- list(wos_cols <- c("Article Title", "Author Full Names", "Source Title", "Publication Year",
"DOI", "Abstract"),
scopus_cols <- c("Title", "Authors", "Source title", "Year", "DOI", "Abstract"),
compendexinspec_cols <- c("Title", "Author", "Source", "Publication year",
"DOI", "Abstract", "Database"),
google_cols <- c("Title", "Authors", "Source", "Year", "DOI", "Abstract"))
names(columns_names) <- query_origin
reading_list <- lapply(1:length(query_origin), function(x) {
df <- articles_origin_list[[query_origin[x]]] %>%
dplyr::select(as.vector(columns_names[[query_origin[x]]]))
print(ncol(df))
if(ncol(df) == 6) {
df$Database <- query_origin[x]
}
colnames(df) <- c("Title" , "Author", "Source", "Year", "DOI", "Abstract", "Database")
return(df)
}) %>%
rbindlist()
View(reading_list)
View(reading_list)
install.packages("fulltext")
require(readxl)
require(tidyverse)
require(data.table)
require(fulltext)
require(readxl)
require(tidyverse)
require(data.table)
require(fulltext)
require(fulltext)
require(stringr)
any(duplicated(str_to_title(reading_list$Title)) == TRUE)
duplicated(str_to_title(reading_list$Title))
sum(duplicated(str_to_title(reading_list$Title)))
reading_list <- lapply(1:length(query_origin), function(x) {
df <- articles_origin_list[[query_origin[x]]] %>%
dplyr::select(as.vector(columns_names[[query_origin[x]]]))
print(ncol(df))
if(ncol(df) == 6) {
df$Database <- query_origin[x]
}
colnames(df) <- c("Title" , "Author", "Source", "Year", "DOI", "Abstract", "Database")
return(df)
}) %>%
rbindlist() %>%
mutate(Title = str_to_title(Title)) %>%
filter(duplicated(Title))
reading_list <- lapply(1:length(query_origin), function(x) {
df <- articles_origin_list[[query_origin[x]]] %>%
dplyr::select(as.vector(columns_names[[query_origin[x]]]))
print(ncol(df))
if(ncol(df) == 6) {
df$Database <- query_origin[x]
}
colnames(df) <- c("Title" , "Author", "Source", "Year", "DOI", "Abstract", "Database")
return(df)
}) %>%
rbindlist() %>%
mutate(Title = str_to_title(Title)) %>%
filter(!duplicated(Title))
View(reading_list)
View(reading_list)
knitr::opts_chunk$set(echo = FALSE)
require(readxl)
require(tidyverse)
require(data.table)
require(stringr)
query_origin <- c("WoS", "Scopus", "CompendexInspec", "GoogleScholar")
articles_origin_list <-lapply(query_origin, function(x) {
read_xlsx(path = paste0("ReadingList/", x, ".xlsx"))
})
names(articles_origin_list) <- query_origin
columns_names <- list(wos_cols <- c("Article Title", "Author Full Names", "Source Title", "Publication Year",
"DOI", "Abstract"),
scopus_cols <- c("Title", "Authors", "Source title", "Year", "DOI", "Abstract"),
compendexinspec_cols <- c("Title", "Author", "Source", "Publication year",
"DOI", "Abstract", "Database"),
google_cols <- c("Title", "Authors", "Source", "Year", "DOI", "Abstract", "Type"))
names(columns_names) <- query_origin
reading_list <- lapply(1:length(query_origin), function(x) {
df <- articles_origin_list[[query_origin[x]]] %>%
dplyr::select(as.vector(columns_names[[query_origin[x]]]))
if(ncol(df) == 6) {
df$Database <- query_origin[x]
}
if("Type" %in% names(df)) {
df <- df %>%
filter(Type == "Journal") %>%
select(-c("Type"))
}
colnames(df) <- c("Title" , "Author", "Source", "Year", "DOI", "Abstract", "Database")
return(df)
}) %>%
rbindlist()
columns_names <- list(wos_cols <- c("Article Title", "Author Full Names", "Source Title", "Publication Year",
"DOI", "Abstract"),
scopus_cols <- c("Title", "Authors", "Source title", "Year", "DOI", "Abstract"),
compendexinspec_cols <- c("Title", "Author", "Source", "Publication year",
"DOI", "Abstract", "Database"),
google_cols <- c("Title", "Authors", "Source", "Year", "DOI", "Abstract", "Type"))
names(columns_names) <- query_origin
View(columns_names)
reading_list <- lapply(1:length(query_origin), function(x) {
df <- articles_origin_list[[query_origin[x]]] %>%
dplyr::select(as.vector(columns_names[[query_origin[x]]]))
if(!("Database" %in% colnames(df))) {
df$Database <- query_origin[x]
}
if("Type" %in% names(df)) {
df <- df %>%
filter(Type == "Journal") %>%
select(-c("Type"))
}
colnames(df) <- c("Title" , "Author", "Source", "Year", "DOI", "Abstract", "Database")
return(df)
}) %>%
rbindlist()
reading_list <- lapply(1:length(query_origin), function(x) {
df <- articles_origin_list[[query_origin[x]]] %>%
dplyr::select(as.vector(columns_names[[query_origin[x]]]))
if(!("Database" %in% colnames(df))) {
df$Database <- query_origin[x]
}
if("Type" %in% colnames(df)) {
df <- df %>%
filter(Type == "Journal") %>%
select(-c("Type"))
}
colnames(df) <- c("Title" , "Author", "Source", "Year", "DOI", "Abstract", "Database")
return(df)
}) %>%
rbindlist()
columns_names <- list(wos_cols <- c("Article Title", "Author Full Names", "Source Title", "Publication Year",
"DOI", "Abstract"),
scopus_cols <- c("Title", "Authors", "Source title", "Year", "DOI", "Abstract"),
compendexinspec_cols <- c("Title", "Author", "Source", "Publication year",
"DOI", "Abstract", "Database"),
google_cols <- c("Title", "Authors", "Source", "Year", "DOI", "Abstract", "Type"))
names(columns_names) <- query_origin
reading_list <- lapply(1:length(query_origin), function(x) {
df <- articles_origin_list[[query_origin[x]]] %>%
dplyr::select(as.vector(columns_names[[query_origin[x]]]))
if(!("Database" %in% colnames(df))) {
df$Database <- query_origin[x]
}
if("Type" %in% colnames(df)) {
df <- df %>%
filter(Type == "Journal") %>%
select(-c("Type"))
}
colnames(df) <- c("Title" , "Author", "Source", "Year", "DOI", "Abstract", "Database")
return(df)
}) %>%
rbindlist()
knitr::opts_chunk$set(echo = FALSE)
require(readxl)
require(tidyverse)
require(data.table)
require(stringr)
query_origin <- c("WoS", "Scopus", "CompendexInspec", "GoogleScholar")
articles_origin_list <-lapply(query_origin, function(x) {
read_xlsx(path = paste0("ReadingList/", x, ".xlsx"))
})
names(articles_origin_list) <- query_origin
columns_names <- list(wos_cols <- c("Article Title", "Author Full Names", "Source Title", "Publication Year",
"DOI", "Abstract"),
scopus_cols <- c("Title", "Authors", "Source title", "Year", "DOI", "Abstract"),
compendexinspec_cols <- c("Title", "Author", "Source", "Publication year",
"DOI", "Abstract", "Database"),
google_cols <- c("Title", "Authors", "Source", "Year", "DOI", "Abstract", "Type"))
names(columns_names) <- query_origin
reading_list <- lapply(1:length(query_origin), function(x) {
df <- articles_origin_list[[query_origin[x]]] %>%
dplyr::select(as.vector(columns_names[[query_origin[x]]]))
if(!("Database" %in% colnames(df))) {
df$Database <- query_origin[x]
}
if("Type" %in% colnames(df)) {
df <- df %>%
filter(Type == "Journal") %>%
select(-c("Type"))
}
colnames(df) <- c("Title" , "Author", "Source", "Year", "DOI", "Abstract", "Database")
return(df)
}) %>%
rbindlist()
reading_list <- lapply(1:length(query_origin), function(x) {
df <- articles_origin_list[[query_origin[x]]] %>%
dplyr::select(as.vector(columns_names[[query_origin[x]]]))
print(colnames(df))
if(!("Database" %in% colnames(df))) {
df$Database <- query_origin[x]
}
if("Type" %in% colnames(df)) {
df <- df %>%
filter(Type == "Journal") %>%
select(-c("Type"))
}
colnames(df) <- c("Title" , "Author", "Source", "Year", "DOI", "Abstract", "Database")
return(df)
}) %>%
rbindlist()
reading_list <- lapply(4, function(x) {
df <- articles_origin_list[[query_origin[x]]] %>%
dplyr::select(as.vector(columns_names[[query_origin[x]]]))
print(colnames(df))
if(!("Database" %in% colnames(df))) {
df$Database <- query_origin[x]
}
if("Type" %in% colnames(df)) {
df <- df %>%
filter(Type == "Journal") %>%
select(-c("Type"))
}
colnames(df) <- c("Title" , "Author", "Source", "Year", "DOI", "Abstract", "Database")
return(df)
}) %>%
rbindlist()
reading_list <- lapply(1:length(query_origin), function(x) {
df <- articles_origin_list[[query_origin[x]]] %>%
dplyr::select(as.vector(columns_names[[query_origin[x]]]))
print(colnames(df))
if(!("Database" %in% colnames(df))) {
df$Database <- query_origin[x]
}
if("Type" %in% colnames(df)) {
df <- df %>%
filter(Type == "Journal") %>%
select(-c("Type"))
}
colnames(df) <- c("Title" , "Author", "Source", "Year", "DOI", "Abstract", "Database")
return(df)
}) %>%
rbindlist()
reading_list <- lapply(1:length(query_origin), function(x) {
df <- articles_origin_list[[query_origin[x]]] %>%
dplyr::select(as.vector(columns_names[[query_origin[x]]]))
print(colnames(df))
if(!("Database" %in% colnames(df))) {
df$Database <- query_origin[x]
}
# if("Type" %in% colnames(df)) {
#   df <- df %>%
#     filter(Type == "Journal") %>%
#     select(-c("Type"))
# }
colnames(df) <- c("Title" , "Author", "Source", "Year", "DOI", "Abstract", "Database")
return(df)
}) %>%
rbindlist()
View(articles_origin_list)
articles_origin_list[["GoogleScholar"]][["Type...6"]]
knitr::opts_chunk$set(echo = FALSE)
require(readxl)
require(tidyverse)
require(data.table)
require(stringr)
query_origin <- c("WoS", "Scopus", "CompendexInspec", "GoogleScholar")
articles_origin_list <-lapply(query_origin, function(x) {
read_xlsx(path = paste0("ReadingList/", x, ".xlsx"))
})
names(articles_origin_list) <- query_origin
columns_names <- list(wos_cols <- c("Article Title", "Author Full Names", "Source Title", "Publication Year",
"DOI", "Abstract"),
scopus_cols <- c("Title", "Authors", "Source title", "Year", "DOI", "Abstract"),
compendexinspec_cols <- c("Title", "Author", "Source", "Publication year",
"DOI", "Abstract", "Database"),
google_cols <- c("Title", "Authors", "Source", "Year", "DOI", "Abstract", "Work"))
names(columns_names) <- query_origin
reading_list <- lapply(1:length(query_origin), function(x) {
df <- articles_origin_list[[query_origin[x]]] %>%
dplyr::select(as.vector(columns_names[[query_origin[x]]]))
print(colnames(df))
if(!("Database" %in% colnames(df))) {
df$Database <- query_origin[x]
}
if("ArticleType" %in% colnames(df)) {
df <- df %>%
filter(ArticleType == "Journal") %>%
select(-c("ArticleType"))
}
colnames(df) <- c("Title" , "Author", "Source", "Year", "DOI", "Abstract", "Database")
return(df)
}) %>%
rbindlist()
knitr::opts_chunk$set(echo = FALSE)
require(readxl)
require(tidyverse)
require(data.table)
require(stringr)
query_origin <- c("WoS", "Scopus", "CompendexInspec", "GoogleScholar")
articles_origin_list <-lapply(query_origin, function(x) {
read_xlsx(path = paste0("ReadingList/", x, ".xlsx"))
})
names(articles_origin_list) <- query_origin
columns_names <- list(wos_cols <- c("Article Title", "Author Full Names", "Source Title", "Publication Year",
"DOI", "Abstract"),
scopus_cols <- c("Title", "Authors", "Source title", "Year", "DOI", "Abstract"),
compendexinspec_cols <- c("Title", "Author", "Source", "Publication year",
"DOI", "Abstract", "Database"),
google_cols <- c("Title", "Authors", "Source", "Year", "DOI", "Abstract", "ArticleType"))
names(columns_names) <- query_origin
reading_list <- lapply(1:length(query_origin), function(x) {
df <- articles_origin_list[[query_origin[x]]] %>%
dplyr::select(as.vector(columns_names[[query_origin[x]]]))
print(colnames(df))
if(!("Database" %in% colnames(df))) {
df$Database <- query_origin[x]
}
if("ArticleType" %in% colnames(df)) {
df <- df %>%
filter(ArticleType == "Journal") %>%
select(-c("ArticleType"))
}
colnames(df) <- c("Title" , "Author", "Source", "Year", "DOI", "Abstract", "Database")
return(df)
}) %>%
rbindlist()
reading_list <- reading_list %>%
mutate(Title = str_to_title(Title)) %>%
filter(!duplicated(Title))
View(reading_list)
reading_list <- reading_list %>%
mutate(Title = str_to_title(Title)) %>%
filter(!duplicated(Title))
knitr::opts_chunk$set(echo = FALSE)
require(readxl)
require(tidyverse)
require(data.table)
require(stringr)
query_origin <- c("WoS", "Scopus", "CompendexInspec", "GoogleScholar")
articles_origin_list <-lapply(query_origin, function(x) {
read_xlsx(path = paste0("ReadingList/", x, ".xlsx"))
})
names(articles_origin_list) <- query_origin
columns_names <- list(wos_cols <- c("Article Title", "Author Full Names", "Source Title", "Publication Year",
"DOI", "Abstract"),
scopus_cols <- c("Title", "Authors", "Source title", "Year", "DOI", "Abstract"),
compendexinspec_cols <- c("Title", "Author", "Source", "Publication year",
"DOI", "Abstract", "Database"),
google_cols <- c("Title", "Authors", "Source", "Year", "DOI", "Abstract", "ArticleType"))
names(columns_names) <- query_origin
reading_list <- lapply(1:length(query_origin), function(x) {
df <- articles_origin_list[[query_origin[x]]] %>%
dplyr::select(as.vector(columns_names[[query_origin[x]]]))
if(!("Database" %in% colnames(df))) {
df$Database <- query_origin[x]
}
if("ArticleType" %in% colnames(df)) {
df <- df %>%
filter(ArticleType == "Journal") %>%
select(-c("ArticleType"))
}
colnames(df) <- c("Title" , "Author", "Source", "Year", "DOI", "Abstract", "Database")
return(df)
}) %>%
rbindlist()
reading_list <- reading_list %>%
mutate(Title = str_to_title(Title)) %>%
filter(!duplicated(Title))
View(reading_list)
writexl::write_xlsx(reading_list, path = "ReadingList.xlsx")
require(readxl)
require(writexl)
require(tidyverse)
require(data.table)
require(stringr)
write_xlsx(reading_list, path = "ReadingList.xlsx")
reading_list <- reading_list %>%
mutate(Title = str_to_title(Title)) %>%
filter(!duplicated(Title)) %>%
reorder(Year)
reading_list <- reading_list %>%
mutate(Title = str_to_title(Title)) %>%
filter(!duplicated(Title)) %>%
arrange(Year)
write_xlsx(reading_list, path = "ReadingList.xlsx")
knitr::opts_chunk$set(echo = FALSE)
require(readxl)
require(writexl)
require(tidyverse)
require(data.table)
require(stringr)
query_origin <- c("WoS", "Scopus", "CompendexInspec", "GoogleScholar")
articles_origin_list <-lapply(query_origin, function(x) {
read_xlsx(path = paste0("ReadingList/", x, ".xlsx"))
})
knitr::opts_chunk$set(echo = FALSE)
require(readxl)
require(writexl)
require(tidyverse)
require(data.table)
require(stringr)
query_origin <- c("WoS", "Scopus", "CompendexInspec", "GoogleScholar")
articles_origin_list <-lapply(query_origin, function(x) {
read_xlsx(path = paste0("ReadingList/", x, ".xlsx"))
})
names(articles_origin_list) <- query_origin
columns_names <- list(wos_cols <- c("Article Title", "Author Full Names", "Source Title", "Publication Year",
"DOI", "Abstract"),
scopus_cols <- c("Title", "Authors", "Source title", "Year", "DOI", "Abstract"),
compendexinspec_cols <- c("Title", "Author", "Source", "Publication year",
"DOI", "Abstract", "Database"),
google_cols <- c("Title", "Authors", "Source", "Year", "DOI", "Abstract", "ArticleType"))
names(columns_names) <- query_origin
reading_list <- lapply(1:length(query_origin), function(x) {
df <- articles_origin_list[[query_origin[x]]] %>%
dplyr::select(as.vector(columns_names[[query_origin[x]]])) %>%
filter(ArticleType == "Journal") %>%
select(-c("ArticleType"))
if(!("Database" %in% colnames(df))) {
df$Database <- query_origin[x]
}
colnames(df) <- c("Title" , "Author", "Source", "Year", "DOI", "Abstract", "Database")
return(df)
}) %>%
rbindlist()
reading_list <- lapply(1:length(query_origin), function(x) {
df <- articles_origin_list[[query_origin[x]]] %>%
dplyr::select(as.vector(columns_names[[query_origin[x]]])) %>%
filter(WorkType == "Journal") %>%
select(-c("WorkType"))
if(!("Database" %in% colnames(df))) {
df$Database <- query_origin[x]
}
colnames(df) <- c("Title" , "Author", "Source", "Year", "DOI", "Abstract", "Database")
return(df)
}) %>%
rbindlist()
knitr::opts_chunk$set(echo = FALSE)
require(readxl)
require(writexl)
require(tidyverse)
require(data.table)
require(stringr)
query_origin <- c("WoS", "Scopus", "CompendexInspec", "GoogleScholar")
articles_origin_list <-lapply(query_origin, function(x) {
read_xlsx(path = paste0("ReadingList/", x, ".xlsx"))
})
names(articles_origin_list) <- query_origin
columns_names <- list(wos_cols <- c("Article Title", "Author Full Names", "Source Title", "Publication Year",
"DOI", "Abstract", "WorkType"),
scopus_cols <- c("Title", "Authors", "Source title", "Year", "DOI", "Abstract", "WorkType"),
compendexinspec_cols <- c("Title", "Author", "Source", "Publication year",
"DOI", "Abstract", "Database", "WorkType"),
google_cols <- c("Title", "Authors", "Source", "Year", "DOI", "Abstract", "WorkType"))
names(columns_names) <- query_origin
reading_list <- lapply(1:length(query_origin), function(x) {
df <- articles_origin_list[[query_origin[x]]] %>%
dplyr::select(as.vector(columns_names[[query_origin[x]]])) %>%
filter(WorkType == "Journal") %>%
select(-c("WorkType"))
if(!("Database" %in% colnames(df))) {
df$Database <- query_origin[x]
}
colnames(df) <- c("Title" , "Author", "Source", "Year", "DOI", "Abstract", "Database")
return(df)
}) %>%
rbindlist()
reading_list <- reading_list %>%
mutate(Title = str_to_title(Title)) %>%
filter(!duplicated(Title)) %>%
arrange(Year)
write_xlsx(reading_list, path = "ReadingList.xlsx")
